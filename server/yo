import {
  Box,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  InputAdornment,
} from "@mui/material";
import { CustomSmartPasteField } from "layouts/resuableComponents/customSmartPasteField";
import { CustomTextField } from "layouts/resuableComponents/customTextField";
import { SearchableDropdown } from "layouts/resuableComponents/searchableDropdown";
import { dialogButtonStyle, dialogCancelButtonStyle } from "layouts/resuableComponents/styles";
import { useEffect, useState } from "react";
import toast from "react-hot-toast";
import { z } from "zod";
import { apiRequest } from "../../axios/apiRequest";
import { formSchema } from "./formSchema";
import { dialogStyle } from "layouts/resuableComponents/styles";
import { CalendarToday } from "@mui/icons-material";
import { useSelector } from "react-redux";
import { AssignedToSelector } from "layouts/resuableComponents/assignedToSelectorField";
import { departments } from "layouts/authentication/sign-up/metadata";
import { departmentLabels } from "layouts/constants";

export const statusLabels = [
  { id: 1, name: "Pending", value: "PENDING" },
  { id: 2, name: "In Progress", value: "IN_PROGRESS" },
  { id: 3, name: "Completed", value: "COMPLETED" },
];
export const priorityLabels = [
  { id: 1, name: "High", value: "HIGH" },
  { id: 2, name: "Low", value: "LOW" },
  { id: 3, name: "Medium", value: "MEDIUM" },
];

export const categoryLabels = [
  { id: 1, name: "Data Request", value: "DATA_REQUEST" },
  { id: 2, name: "Compliance Query", value: "COMPLIANCE_QUERY" },
  { id: 3, name: "Audit Finding", value: "AUDIT_FINDING" },
  { id: 4, name: "Operational Issue", value: "OPERATIONAL_ISSUE" },
  { id: 5, name: "Other", value: "OTHER" },
];

const formatDatetimeLocal = (isoString) => {
  if (!isoString) return "";
  const date = new Date(isoString);
  const tzOffset = date.getTimezoneOffset() * 60000;
  const localISO = new Date(date.getTime() - tzOffset).toISOString().slice(0, 16);
  return localISO;
};

const addIndentRecordUrl = `${process.env.REACT_APP_BACKEND_URL}/api/v1/indents/`;

export default function IndentFormDialog({ open, onClose, onSubmit, initialData }) {
  const [formData, setFormData] = useState({
    indentId: "",
    department: "",
    description: "",
    category: "",
    status: "",
    priority: "",
    assignedTo: "",
    dueDate: "",
    comments: "",
  });

  const user = useSelector((state) => state.user.user);

  const isComplianceMaker = user.role === "COMPLIANCE_MAKER";

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formErrors, setFormErrors] = useState({});
  const [availableUsers, setAvailableUsers] = useState([]);

  useEffect(() => {
    if (initialData) {
      setFormData({
        ...initialData,
        dueDate: initialData?.dueDate ? formatDatetimeLocal(initialData?.dueDate) : "",
        department:
          departmentLabels.find((s) => s.value === initialData.department)?.name ||
          initialData.department,
        status: statusLabels.find((s) => s.value === initialData.status)?.name || value,
        priority: priorityLabels.find((s) => s.value === initialData.priority)?.name || value,
        category: categoryLabels.find((s) => s.value === initialData.category)?.name || value,
      });
    } else {
      setFormData({
        department: "",
        description: "",
        status: "",
        category: "",
        priority: "",
        assignedTo: "",
        dueDate: "",
        comments: "",
      });
    }
  }, [initialData]);

  useEffect(() => {
    
    const fetchUsers = async () => {
      if (!formData.department) return;

      const isComplianceDepartment = formData.department === "Compliance";

      const getDepartmentMappedValue = (name) =>
        departmentLabels.find((d) => d.name === name)?.value || "";
      if (!getDepartmentMappedValue(formData.department)) return;
      try {
        const response = await apiRequest(
          "GET",
          isComplianceDepartment
            ? `${process.env.REACT_APP_BACKEND_URL}/api/admin/v1/users?role=COMPLIANCE_CHECKER`
            : `${
                process.env.REACT_APP_BACKEND_URL
              }/api/admin/v1/users?department=${getDepartmentMappedValue(
                formData.department
              )}&role=DEPARTMENT_MAKER`
        );

        setAvailableUsers(response.data);
        if (response.data.length === 0) {
          isComplianceDepartment
            ? toast.error("No Complaice Checker found for this Compliance")
            : toast.error("No Department Maker found for this department");
        }

        if (response.data.length === 1) {
          // only one user, auto-populate
          setFormData((prev) => ({ ...prev, assignedTo: response?.data[0].email }));
        } else {
          // multiple users, show dropdown
          setFormData((prev) => ({ ...prev, assignedTo: "" }));
        }
      } catch (error) {
        isComplianceDepartment
          ? toast.error("No Complaice Checker found for this Compliance")
          : toast.error("No Department Maker found for this department");
        setAvailableUsers([]);
        setFormData((prev) => ({ ...prev, assignedTo: "" }));
      }
    };

    fetchUsers();
  }, [formData.department]);

  const handleDialogClose = (event, reason) => {
    // Reset form only if dialog is being dismissed (not submitted)
    if (!initialData) {
      setFormData({
        indentId: "",
        department: "",
        description: "",
        category: "",
        status: "",
        priority: "",
        assignedTo: "",
        dueDate: "",
        comments: "",
      });
    }

    setErrors({});
    setFormErrors({});

    // Let the parent know to close the modal
    onClose();
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: undefined,
      });
    }
  };

  const handleDescriptionChange = (htmlContent) => {
    setFormData((prev) => ({ ...prev, description: htmlContent }));
  };

  const handleValidationError = (error) => {
    if (error instanceof z.ZodError) {
      const formattedErrors = {};
      error.errors.forEach((err) => {
        const path = err.path[0];
        formattedErrors[path] = err.message;
      });
      setErrors(formattedErrors);
    } else {
      toast.error("An error occurred while submitting the form.");
    }
  };

  const handleAddIndentRecord = async () => {
    try {
      let result;
      setIsSubmitting(true);
      const validatedData = formSchema.parse(formData);
      const payload = {
        ...validatedData,
      };
      result = await apiRequest("POST", addIndentRecordUrl, payload);
      if (result.status === 201 || result.status === 204) {
        toast.success("Indent Added Successfully");
      }
      onSubmit();
      onClose();
    } catch (error) {
      handleValidationError(error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleUpdateIndentRecord = async () => {
    try {
      setIsSubmitting(true);
      //validate with Zod before proceding
      const validatedData = formSchema.parse(formData);
      let updatedFields = {};
      const updatableFields = [
        "role",
        "department",
        "description",
        "status",
        "category",
        "priority",
        "assignedTo",
        "dueDate",
        "comments",
        "file",
      ];

      updatableFields.forEach((field) => {
        let newValue = validatedData[field];
        let initialValue = initialData[field];

        if (field === "dueDate") {
          newValue = new Date(validatedData[field]).toISOString();
          initialValue = new Date(initialData[field]).toISOString();
        }

        if (field === "status") {
          newValue = statusLabels.find((item) => item.name === newValue)?.value || newValue;
        }

        if (field === "priority") {
          newValue = priorityLabels.find((item) => item.name === newValue)?.value || newValue;
        }

        if (field === "department") {
          newValue = departmentLabels.find((item) => item.name === newValue)?.value || newValue;
        }
        if (field === "category") {
          newValue = categoryLabels.find((item) => item.name === newValue)?.value || newValue;
        }

        if (newValue !== initialValue) {
          updatedFields[field] = formData[field];
        }
      });

      if (Object.keys(updatedFields).length > 0) {
        updatedFields = { ...updatedFields, type: "FIELD_UPDATE" };
        const payload = {
          updatedFields,
        };
        const result = await apiRequest(
          "PUT",
          `${process.env.REACT_APP_BACKEND_URL}/api/v1/indents/${user.role}/${user.department}/${formData.indentId}`,
          payload
        );

        if (result.status === 200 || result.status === 204) {
          toast.success("Indent updated successfully!");
        }
      } else {
        toast.error("Looks like you haven't made any changes yet!");
      }
      onSubmit();
      onClose();
    } catch (error) {
      handleValidationError(error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSubmit = async () => {
    if (initialData) {
      handleUpdateIndentRecord();
    } else {
      handleAddIndentRecord();
    }
  };

  return (
    <Dialog open={open} onClose={handleDialogClose} fullWidth maxWidth="md" sx={dialogStyle}>
      <DialogTitle
        sx={{ color: (theme) => theme.palette.custom.two, fontSize: "0.9rem !important" }}
      >
        {initialData ? "Edit Indent" : "Add New Indent"}
      </DialogTitle>

      <DialogContent>
        <Box display="flex" flexDirection="column" gap={3} mt={2}>
          <SearchableDropdown
            label="Department"
            placeholder="Enter Department"
            name="department"
            options={departments}
            disabled={!isComplianceMaker}
            value={formData.department}
            onChange={handleChange}
            error={errors.department}
          />
          <CustomSmartPasteField
            value={formData.description}
            label="Description"
            placeholder="enter description"
            disabled={!isComplianceMaker}
            onChange={handleDescriptionChange}
            error={errors.description}
          />
          <Box display="flex" gap={2}>
            <SearchableDropdown
              label="Category"
              placeholder="Enter Category"
              name="category"
              options={categoryLabels}
              disabled={!isComplianceMaker}
              value={formData.category}
              onChange={handleChange}
              error={errors.category}
            />
            <SearchableDropdown
              label="Priority"
              placeholder="Enter Priority"
              name="priority"
              options={priorityLabels}
              disabled={!isComplianceMaker}
              value={formData.priority}
              onChange={handleChange}
              error={errors.priority}
            />
          </Box>
          {formData.department && (
            <AssignedToSelector
              availableUsers={availableUsers}
              value={formData.assignedTo}
              disabled={!isComplianceMaker}
              onChange={(val) => setFormData((prev) => ({ ...prev, assignedTo: val }))}
              error={errors.assignedTo}
            />
          )}
          <CustomTextField
            label="Due Date"
            name="dueDate"
            type="datetime-local"
            value={formData.dueDate}
            onChange={handleChange}
            InputLabelProps={{ shrink: true }}
            error={errors.dueDate}
            endAdornment={
              <InputAdornment position="end">
                <CalendarToday
                  sx={{ color: (theme) => theme.palette.custom.two, fontSize: "1.2rem" }}
                />
              </InputAdornment>
            }
          />
          <CustomTextField
            label="Comments"
            placeholder="Enter Comments"
            name="comments"
            disabled={!isComplianceMaker}
            multiline
            rows={2}
            value={formData.comments}
            onChange={handleChange}
            error={errors.comments}
          />
        </Box>
      </DialogContent>
      <DialogActions>
        <Button onClick={handleDialogClose} size="small" sx={dialogCancelButtonStyle}>
          Cancel
        </Button>

        <Button onClick={handleSubmit} disabled={isSubmitting} size="small" sx={dialogButtonStyle}>
          {initialData ? "Update" : "Add"}
        </Button>
      </DialogActions>
    </Dialog>
  );
}
